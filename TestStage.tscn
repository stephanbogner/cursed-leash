[gd_scene load_steps=20 format=2]

[ext_resource path="res://TestStage.gd" type="Script" id=1]
[ext_resource path="res://Person.tscn" type="PackedScene" id=2]
[ext_resource path="res://Dog.tscn" type="PackedScene" id=3]
[ext_resource path="res://Dog.gd" type="Script" id=4]
[ext_resource path="res://TrashCan.tscn" type="PackedScene" id=5]
[ext_resource path="res://Person.gd" type="Script" id=6]
[ext_resource path="res://ScreenShake.tscn" type="PackedScene" id=7]
[ext_resource path="res://Ground.tscn" type="PackedScene" id=8]
[ext_resource path="res://Leash.png" type="Texture" id=9]
[ext_resource path="res://cars/SUV.png" type="Texture" id=10]
[ext_resource path="res://cars/Cop.png" type="Texture" id=11]
[ext_resource path="res://cars/NormalCar2.png" type="Texture" id=12]
[ext_resource path="res://cars/SportsCar.png" type="Texture" id=13]
[ext_resource path="res://cars/Taxi.png" type="Texture" id=14]
[ext_resource path="res://Interface.tscn" type="PackedScene" id=15]

[sub_resource type="Shader" id=8]
code = "/*
	Glitch Effect Shader by Yui Kinomoto @arlez80

	MIT License
*/

shader_type canvas_item;

// 振動の強さ
uniform float shake_power = 0.03;
// 振動率
uniform float shake_rate : hint_range( 0.0, 1.0 ) = 0.2;
// 振動速度
uniform float shake_speed = 5.0;
// 振動ブロックサイズ
uniform float shake_block_size = 30.5;
// 色の分離率
uniform float shake_color_rate : hint_range( 0.0, 1.0 ) = 0.01;

float random( float seed )
{
	return fract( 543.2543 * sin( dot( vec2( seed, seed ), vec2( 3525.46, -54.3415 ) ) ) );
}

void fragment( )
{
	float enable_shift = float(
		random( trunc( TIME * shake_speed ) )
	<	shake_rate
	);

	vec2 fixed_uv = SCREEN_UV;
	fixed_uv.x += (
		random(
			( trunc( SCREEN_UV.y * shake_block_size ) / shake_block_size )
		+	TIME
		) - 0.5
	) * shake_power * enable_shift;

	vec4 pixel_color = textureLod( SCREEN_TEXTURE, fixed_uv, 0.0 );
	pixel_color.r = mix(
		pixel_color.r
	,	textureLod( SCREEN_TEXTURE, fixed_uv + vec2( shake_color_rate, 0.0 ), 0.0 ).r
	,	enable_shift
	);
	pixel_color.b = mix(
		pixel_color.b
	,	textureLod( SCREEN_TEXTURE, fixed_uv + vec2( -shake_color_rate, 0.0 ), 0.0 ).b
	,	enable_shift
	);
	COLOR = pixel_color;
}"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/shake_power = 0.03
shader_param/shake_rate = 0.436
shader_param/shake_speed = 5.0
shader_param/shake_block_size = 30.5
shader_param/shake_color_rate = 0.01

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;

// 残像テクスチャ
uniform sampler2D residual_image_tex : hint_black_albedo;
// 残像の強さ
uniform float residual_image_rate : hint_range( 0.0, 1.0 ) = 0.95;
// ディザリング
uniform float dithering = 0.1;
// カラー液晶
uniform bool color_lcd = false;
// モノクロ液晶（明るいほう）
uniform vec4 monochrome_light : hint_color = vec4( 0.5372549019607843, 0.6274509803921569, 0.34765625, 1.0 );
// モノクロ液晶（暗くなるほう）
uniform vec4 monochrome_dark : hint_color = vec4( 0.19607843137254902, 0.22745098039215686, 0.1450980392156863, 1.0 );
// 液晶発色段階数
uniform int steps : hint_range( 2, 255 ) = 4;

float random( vec2 seed )
{
	return fract( 543.2543 * sin( dot( seed, vec2( 3525.46, -54.3415 ) ) ) );
}

void fragment( )
{
	vec4 pixel_color = texture( SCREEN_TEXTURE, SCREEN_UV );
	float rand = random( SCREEN_UV );
	float steps_floated = float( steps );

	// ディザリング
	float dither_rand = rand * dithering - ( dithering * 0.5 );
	pixel_color = clamp( pixel_color + vec4( dither_rand, dither_rand, dither_rand, 0.0 ), vec4( 0.0, 0.0, 0.0, 0.0 ), vec4( 1.0, 1.0, 1.0, 1.0 ) );

	// カラーかモノクロか
	float monochrome = pixel_color.r * 0.2126 + pixel_color.g * 0.7152 + pixel_color.b * 0.0722;
	pixel_color = mix(
		mix( monochrome_dark, monochrome_light, floor( monochrome * steps_floated ) / steps_floated )
	,	floor( pixel_color * steps_floated) / steps_floated
	,	float( color_lcd )
	);

	// 残像と合成
	COLOR = mix( pixel_color, texture( residual_image_tex, UV ), residual_image_rate );
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/residual_image_rate = 0.95
shader_param/dithering = 0.1
shader_param/color_lcd = false
shader_param/monochrome_light = Color( 0.537255, 0.627451, 0.347656, 1 )
shader_param/monochrome_dark = Color( 0.196078, 0.227451, 0.145098, 1 )
shader_param/steps = 4

[node name="TestStage" type="Node2D"]
script = ExtResource( 1 )

[node name="Ground" parent="." instance=ExtResource( 8 )]
position = Vector2( 254.885, 6.2677 )

[node name="Person" parent="." instance=ExtResource( 2 )]
position = Vector2( 200.653, 377.998 )
collision_mask = 3
script = ExtResource( 6 )

[node name="Dog" parent="." instance=ExtResource( 3 )]
position = Vector2( 625.496, 314.519 )
collision_layer = 2
collision_mask = 3
script = ExtResource( 4 )

[node name="TrashCan" parent="." instance=ExtResource( 5 )]
position = Vector2( 27.9806, -424.699 )
collision_layer = 7
collision_mask = 7
script = null

[node name="TrashCan2" parent="." instance=ExtResource( 5 )]
position = Vector2( 457.966, -420.857 )
collision_layer = 7
collision_mask = 7
script = null

[node name="TrashCan3" parent="." instance=ExtResource( 5 )]
position = Vector2( 666.498, 372.602 )
collision_layer = 7
collision_mask = 7
script = null

[node name="TrashCan4" parent="." instance=ExtResource( 5 )]
position = Vector2( -191.254, 238.468 )
collision_layer = 7
collision_mask = 7
script = null

[node name="SoulSwitchTimer" type="Timer" parent="."]

[node name="LootDropTimer" type="Timer" parent="."]

[node name="SportsCar" type="Sprite" parent="."]
position = Vector2( 315.009, 1321.47 )
rotation = -3.20269
texture = ExtResource( 13 )

[node name="Taxi" type="Sprite" parent="."]
position = Vector2( -366.522, -376.35 )
rotation = -1.75625
texture = ExtResource( 14 )

[node name="NormalCar2" type="Sprite" parent="."]
position = Vector2( 1920.31, 136.28 )
rotation = 4.96659
texture = ExtResource( 12 )

[node name="SUV" type="Sprite" parent="."]
position = Vector2( 1221.27, -540.944 )
rotation = 2.65071
texture = ExtResource( 10 )

[node name="Cop" type="Sprite" parent="."]
position = Vector2( 148.352, 224.725 )
rotation = 0.461072
texture = ExtResource( 11 )

[node name="Cam" type="Camera2D" parent="."]
current = true
zoom = Vector2( 3, 3 )
smoothing_enabled = true

[node name="ShaderGlitch" type="Sprite" parent="Cam"]
visible = false
material = SubResource( 9 )
position = Vector2( -18.2411, 2.02673 )
scale = Vector2( 550.259, 82.0715 )
texture = ExtResource( 9 )

[node name="CanvasLayer" type="CanvasLayer" parent="Cam"]

[node name="Interface" parent="Cam/CanvasLayer" instance=ExtResource( 15 )]

[node name="ScreenShake" parent="Cam" instance=ExtResource( 7 )]

[node name="ShaderColor" type="Sprite" parent="Cam"]
visible = false
material = SubResource( 7 )
position = Vector2( 9.00704, 11.6027 )
scale = Vector2( 629.085, 100.308 )
texture = ExtResource( 9 )

[connection signal="invert_screen_signal" from="." to="." method="_on_TestStage_invert_screen_signal"]
[connection signal="scored" from="Dog" to="." method="_on_Dog_scored"]
[connection signal="timeout" from="SoulSwitchTimer" to="Dog" method="_on_SoulSwitchTimer_timeout"]
[connection signal="timeout" from="SoulSwitchTimer" to="Person" method="_on_SoulSwitchTimer_timeout"]
[connection signal="timeout" from="SoulSwitchTimer" to="." method="_on_SoulSwitchTimer_timeout"]
[connection signal="timeout" from="LootDropTimer" to="." method="_on_LootDropTimer_timeout"]
